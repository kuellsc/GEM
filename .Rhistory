j = seq(1,60,1)
phi = j*0
for (n in j){
if (n<=z1){
phi[n] = n/z1*i**z2
} else {
phi[n] = i**z2
}
}
plot(j,phi)
z1 = 10
z2 = 2
i = 35
n = 1
j = seq(1,60,1)
phi = j*0
for (n in j){
if (n<=z1){
phi[n] = n/z1*i**z2
} else {
phi[n] = i**z2
}
}
plot(j,phi)
z1 = 10
z2 = 1
z3 = 2
i = 35
n = 1
j = seq(1,60,1)
phi = j*0
for (n in j){
if (n<=z1){
phi[n] = (n/z1)^z3*i**z2
} else {
phi[n] = i**z2
}
}
plot(j,phi)
z1 = 10
z2 = 1
z3 = 0.2
i = 35
n = 1
j = seq(1,60,1)
phi = j*0
for (n in j){
if (n<=z1){
phi[n] = (n/z1)^z3*i**z2
} else {
phi[n] = i**z2
}
}
plot(j,phi)
install.packages("reticulate")
Sys.which("make")
install.packages("jsonlite", type = "source")
install.packages("rgee")
install.packages("reticulate")
install.packages("reticulate")
Sys.which("make")
install.packages("rgee")
rgee::ee_install()
install.packages("rstudioapi")
rgee::ee_install()
Y
rgee::ee_clean_pyenv()
rgee::ee_install_set_pyenv(py_path = "C:\Python3\")
rgee::ee_install_set_pyenv(py_path = "C:\\Python3\\")
rgee::ee_install()
n
conda update -n base -c defaults conda
conda update -n base -c defaults conda
conda update -n base -c defaults conda
ee_check()
library(rgee)
ee_Initialize()
ee_check()
rgee::ee_install_upgrade()
library(rgee)
ee_Initialize()
createTimeBand <-function(img) {
year <- ee$Date(img$get('system:time_start'))$get('year')$subtract(1991L)
ee$Image(year)$byte()$addBands(img)
}
collection <- ee$
ImageCollection('NOAA/DMSP-OLS/NIGHTTIME_LIGHTS')$
select('stable_lights')$
map(createTimeBand)
col_reduce <- collection$reduce(ee$Reducer$linearFit())
col_reduce <- col_reduce$addBands(
col_reduce$select('scale'))
ee_print(col_reduce)
Map$setCenter(9.08203, 47.39835, 3)
Map$addLayer(
eeObject = col_reduce,
visParams = list(
bands = c("scale", "offset", "scale"),
min = 0,
max = c(0.18, 20, -0.18)
),
name = "stable lights trend"
)
install.packages("geojsonio")
install.packages("tidyverse")
install.packages("sf")
library(tidyverse)
library(rgee)
library(sf)
ee_Initialize()
library(tidyverse)
library(rgee)
library(sf)
ee_Initialize()
install.packages("fansi")
library(tidyverse)
library(reticulate)
library(rgee)
library(fansi)
install.packages("fansi")
library(fansi)
library(tidyverse)
install.packages("stringi")
library(tidyverse)
library(sf)
ee_Initialize()
nc <- st_read(system.file("shape/nc.shp", package = "sf"), quiet = TRUE)
terraclimate <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate("2001-01-01", "2002-01-01") %>%
ee$ImageCollection$map(function(x) x$select("pr")) %>% # Select only precipitation bands
ee$ImageCollection$toBands() %>% # from imagecollection to image
ee$Image$rename(sprintf("PP_%02d",1:12)) # rename the bands of an image
ee_nc_rain <- ee_extract(x = terraclimate, y = nc["NAME"], sf = FALSE)
install.packages("ggplot2")
ee_nc_rain %>%
pivot_longer(-NAME, names_to = "month", values_to = "pr") %>%
mutate(month, month=gsub("PP_", "", month)) %>%
ggplot(aes(x = month, y = pr, group = NAME, color = pr)) +
geom_line(alpha = 0.4) +
xlab("Month") +
ylab("Precipitation (mm)") +
theme_minimal()
ee_nc_rain %>%
pivot_longer(-NAME, names_to = "month", values_to = "pr") %>%
mutate(month, month=gsub("PP_", "", month)) %>%
ggplot(aes(x = month, y = pr, group = NAME, color = pr)) +
geom_line(alpha = 0.4) +
xlab("Month") +
ylab("Precipitation (mm)") +
theme_minimal()
library(reticulate)
library(rgee)
library(fansi)
library(sf)
library(tidyverse)
ee_Initialize()
library(ggplot2)
nc <- st_read(system.file("shape/nc.shp", package = "sf"), quiet = TRUE)
terraclimate <- ee$ImageCollection("IDAHO_EPSCOR/TERRACLIMATE") %>%
ee$ImageCollection$filterDate("2001-01-01", "2002-01-01") %>%
ee$ImageCollection$map(function(x) x$select("pr")) %>% # Select only precipitation bands
ee$ImageCollection$toBands() %>% # from imagecollection to image
ee$Image$rename(sprintf("PP_%02d",1:12)) # rename the bands of an image
ee_nc_rain <- ee_extract(x = terraclimate, y = nc["NAME"], sf = FALSE)
ee_nc_rain %>%
pivot_longer(-NAME, names_to = "month", values_to = "pr") %>%
mutate(month, month=gsub("PP_", "", month)) %>%
ggplot(aes(x = month, y = pr, group = NAME, color = pr)) +
geom_line(alpha = 0.4) +
xlab("Month") +
ylab("Precipitation (mm)") +
theme_minimal()
library(rgee)
# ee_reattach() # reattach ee as a reserved word
ee_Initialize()
# Load an image.
image <- ee$Image("LANDSAT/LC08/C01/T1/LC08_044034_20140318")
# Display the image.
Map$centerObject(image)
Map$addLayer(image, name = "Landsat 8 original image")
# Define visualization parameters in an object literal.
vizParams <- list(
bands = c("B5", "B4", "B3"),
min = 5000, max = 15000, gamma = 1.3
)
Map$addLayer(image, vizParams, "Landsat 8 False color")
# Use Map to add features and feature collections to the map. For example,
counties <- ee$FeatureCollection("TIGER/2016/Counties")
Map$addLayer(
eeObject = counties,
visParams = vizParams,
name = "counties"
)
library(rgee)
# ee_reattach() # reattach ee as a reserved word
ee_Initialize()
collection <- ee$ImageCollection("LANDSAT/LC08/C01/T1")
point <- ee$Geometry$Point(-122.262, 37.8719)
start <- ee$Date("2014-06-01")
finish <- ee$Date("2014-10-01")
filteredCollection <- ee$ImageCollection("LANDSAT/LC08/C01/T1")$
filterBounds(point)$
filterDate(start, finish)$
sort("CLOUD_COVER", TRUE)
first <- filteredCollection$first()
# Define visualization parameters in an object literal.
vizParams <- list(
bands = c("B5", "B4", "B3"),
min = 5000,
max = 15000,
gamma = 1.3
)
Map$addLayer(first, vizParams, "Landsat 8 image")
# Load a feature collection.
featureCollection <- ee$FeatureCollection("TIGER/2016/States")
# Filter the collection.
filteredFC <- featureCollection$filter(ee$Filter$eq("NAME", "California"))
# Display the collection.
Map$addLayer(
eeObject = filteredFC,
visParams = list(palette = "red"),
name = "California"
)
library(rgee)
# ee_reattach() # reattach ee as a reserved word
ee_Initialize()
collection <- ee$ImageCollection("LANDSAT/LC08/C01/T1")
point <- ee$Geometry$Point(15.94617, -21.78060)
start <- ee$Date("2014-06-01")
finish <- ee$Date("2014-10-01")
filteredCollection <- ee$ImageCollection("LANDSAT/LC08/C01/T1")$
filterBounds(point)$
filterDate(start, finish)$
sort("CLOUD_COVER", TRUE)
first <- filteredCollection$first()
# Define visualization parameters in an object literal.
vizParams <- list(
bands = c("B5", "B4", "B3"),
min = 5000,
max = 15000,
gamma = 1.3
)
Map$addLayer(first, vizParams, "Landsat 8 image")
# Load a feature collection.
featureCollection <- ee$FeatureCollection("TIGER/2016/States")
# Filter the collection.
filteredFC <- featureCollection$filter(ee$Filter$eq("NAME", "California"))
# Display the collection.
Map$addLayer(
eeObject = filteredFC,
visParams = list(palette = "red"),
name = "Namibia"
)
library(rgee)
# ee_reattach() # reattach ee as a reserved word
ee_Initialize()
# Simple RGB Vizualization -Landsat
image <- ee$Image("LANDSAT/LC8_L1T_TOA/LC80440342014077LGN00")
vizParams <- list(
min = 0,
max = 0.5,
bands = c("B5", "B4", "B3"),
gamma = c(0.95, 1.1, 1)
)
Map$setCenter(-122.1899, 37.5010, 10)
Map$addLayer(image, vizParams)
# Simple Single-Band Vizualization
ndwi <- image$normalizedDifference(c("B3", "B5"))
ndwiViz <- list(
min = 0.5,
max = 1,
palette = c("00FFFF", "0000FF")
)
## Masking
ndwiMasked <- ndwi$updateMask(ndwi$gte(0.4))
## Produce an RGB layers.
imageRGB <- image$visualize(
list(
bands = c("B5", "B4", "B3"),
max = 0.5
)
)
ndwiRGB <- ndwiMasked$visualize(
list(
min = 0.5,
max = 1,
palette = c("00FFFF", "0000FF")
)
)
# Mosaic the visualization layers and display( or export).
roi <- ee$Geometry$Point(c(-122.4481, 37.7599))$buffer(20000)
Map$centerObject(image$clip(roi))
Map$addLayer(
eeObject = image$clip(roi),
visParams = vizParams,
name = "Landsat 8"
) +
Map$addLayer(
eeObject = ndwiMasked$clip(roi),
visParams = ndwiViz,
name = "NDWI"
)
library(rgee)
# ee_reattach() # reattach ee as a reserved word
ee_Initialize()
dataset <- ee$FeatureCollection("projects/google/wrs2_descending")
empty <- ee$Image()$byte()
Map$setCenter(-78, 36, 5)
Map$addLayer(empty$paint(dataset, 0, 2), {}, "Landsat WRS-2 grid")
install.packages("stars")
install.packages("tmap")
library(stars)
library(rgee)
library(tmap)
library(abind)
library(stars)
library(rgee)
library(tmap)
ee_Initialize(drive = TRUE)
install.packages("rticles")
install.packages("bookdown")
install.packages("reticulate")
install.packages("tidyverse")
install.packages("tint")
install.packages("binb")
install.packages("linl")
install.packages("pinp")
install.packages("rgee")
rgee::ee_install()
ee_check()
library(rgee)
ee_check()
rgee::ee_install_upgrade()
library(rgee)
ee_check()
ee_check()
install.packages("ggplot2")
system2('pandoc-citeproc', '--version')
library(reticulate)
library(rgee)
ee_initialize()
ee_Initialize()
py_install("geemap")
gm <- import("geemap")
unlink("C:/+THydro/+TeX/Present/THL BinB/monash/monash_cache", recursive = TRUE)
unlink("C:/+THydro/+TeX/Present/THL BinB/present/present_cache", recursive = TRUE)
install.packages("RevoUtilsMath")
install.packages("bibtex")
install.packages("posterdown")
install.packages("postr")
install.packages("BAS")
data(bodyfat)
summary(bodyfat)
library(BAS)
data(bodyfat)
data(bodyfat)
summary(bodyfat)
library(tint)
# invalidate cache when the package version changes
knitr::opts_chunk$set(tidy = FALSE, cache.extra = packageVersion('tint'))
options(htmltools.dir.version = FALSE)
library(BAS)
data(bodyfat)
summary(bodyfat)
install.packages("bookdown")
shiny::runApp('C:/+THydro/+Projects/+Spes/Code/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/Shine')
shiny::runApp('C:/+THydro/+Projects/+Spes/Code/Rmd/Shine')
shiny::runApp('C:/+THydro/+Projects/+Spes/Code/Rmd/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/Rmd/Shine')
unlink("C:/+THydro/+Projects/+Medsal/Deliverables/D3.1/Isotopes/Isotopes_cache", recursive = TRUE)
unlink("C:/+THydro/+Projects/+Medsal/Deliverables/D3.1/Isotopes/Isotopes_cache", recursive = TRUE)
unlink("C:/+THydro/+Projects/+Medsal/Deliverables/D3.1/Isotopes/Isotopes_cache", recursive = TRUE)
unlink("C:/+THydro/+Projects/+Medsal/Deliverables/D3.1/Isotopes/Isotopes_cache", recursive = TRUE)
unlink("C:/+THydro/+Projects/+Medsal/Deliverables/D3.1/Isotopes/Isotopes_cache", recursive = TRUE)
unlink("C:/+THydro/+Projects/+Medsal/Deliverables/D3.1/Isotopes/Isotopes_cache", recursive = TRUE)
unlink("C:/+THydro/+Projects/+Medsal/Deliverables/D3.1/Taylor/Taylor_cache", recursive = TRUE)
unlink("C:/+THydro/+Projects/+Medsal/Deliverables/D3.1/Taylor/Taylor_cache", recursive = TRUE)
shiny::runApp('C:/+THydro/+Projects/+Spes/Code/Rmd/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
shiny::runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/Rmd/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/Rmd/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/Rmd/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/Rmd/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/Rmd/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/Rmd/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/Rmd/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/Rmd/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/Rmd/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/Rmd/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/Rmd/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/Rmd/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/Rmd/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/Rmd/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/Rmd/Shine')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
shiny::runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
shiny::runApp('C:/+THydro/+Projects/+Spes/Code/ReadPlot/RainPlot')
